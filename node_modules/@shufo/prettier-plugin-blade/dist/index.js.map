{
  "version": 3,
  "sources": ["../src/index.ts", "../src/parser.ts", "../src/printer.ts", "../src/options.ts"],
  "sourcesContent": ["import { parse } from \"./parser\";\nimport { print } from \"./printer\";\nimport { options, defaultOptions } from \"./options\";\nimport { Parser, Printer, SupportLanguage } from \"prettier\";\n\nexport const languages: SupportLanguage[] = [\n  {\n    name: \"Blade\",\n    parsers: [\"blade\"],\n    since: \"1.0.0\",\n    extensions: [\".blade.php\"],\n    tmScope: \"source.blade.php\",\n    aceMode: \"text\",\n    linguistLanguageId: 33,\n    vscodeLanguageIds: [\"blade\"],\n  },\n];\n\nexport const parsers: { [k: string]: Parser } = {\n  blade: {\n    parse,\n    astFormat: \"blade-format\",\n    locStart(node: any) {\n      return node.start;\n    },\n    locEnd(node: any) {\n      return node.end;\n    },\n  },\n};\n\nexport const printers: { [k: string]: Printer } = {\n  \"blade-format\": {\n    print,\n  },\n};\n\nexport { options, defaultOptions };\n", "import { Parser, ParserOptions, resolveConfigFile } from \"prettier\";\nimport { FormatterOption } from \"blade-formatter\";\nimport { createSyncFn } from \"synckit\";\nimport path from 'path';\n\nexport const parse = (\n  text: string,\n  parsers: { [parserName: string]: Parser },\n  opts: ParserOptions & FormatterOption\n) => {\n  const formatterOptions: FormatterOption = {\n    indentSize: opts.tabWidth,\n    wrapLineLength: opts.printWidth,\n    wrapAttributes: opts.singleAttributePerLine ? 'force-expand-multiline' : opts.bracketSameLine ? 'force-aligned' : opts.wrapAttributes,\n    endWithNewline: opts.endWithNewline,\n    useTabs: opts.useTabs,\n    sortTailwindcssClasses: opts.sortTailwindcssClasses,\n    tailwindcssConfigPath: resolveTailwindConfigPath(opts.filepath, opts.tailwindcssConfigPath),\n    sortHtmlAttributes: opts.sortHtmlAttributes,\n    noMultipleEmptyLines: true,\n    noPhpSyntaxCheck: opts.noPhpSyntaxCheck,\n    customHtmlAttributesOrder: opts.customHtmlAttributesOrder,\n  };\n\n  const syncFn = createSyncFn(require.resolve(\"./worker\"));\n  const result = syncFn(text, formatterOptions);\n\n  return {\n    type: \"blade-formatter\",\n    body: result,\n    end: text.length,\n    source: text,\n    start: 0,\n  };\n};\n\nfunction resolveTailwindConfigPath(filepath: string | undefined, optionPath: string | undefined): string | undefined {\n  if (!optionPath) {\n    return;\n  }\n\n  if (path.isAbsolute(optionPath ?? '')) {\n    return optionPath;\n  }\n\n  const prettierRcPath = resolveConfigFile.sync(filepath);\n\n  return path.resolve(path.dirname(prettierRcPath ?? ''), optionPath ?? '')\n}", "import { AstPath, Doc } from \"prettier\";\n\nexport const print = (path: AstPath): Doc => {\n  const node = path.getValue();\n\n  switch (node.type) {\n    case \"blade-formatter\": {\n      return node.body;\n    }\n  }\n\n  throw new Error(`Unknown node type: ${node.type}`);\n};\n", "export const defaultOptions = {\n  tabWidth: 4,\n  printWidth: 120,\n};\n\nexport const options = {\n  wrapAttributes: {\n    type: \"string\",\n    category: \"Blade\",\n    default: \"auto\",\n    description:\n      \"The way to wrap attributes. [auto|force|force-aligned|force-expand-multiline|aligned-multiple|preserve|preserve-aligned]\",\n    since: \"1.0.0\",\n  },\n  endWithNewLine: {\n    type: \"boolean\",\n    category: \"Blade\",\n    default: true,\n    description: \"End output with newline.\",\n    since: \"1.0.0\",\n  },\n  sortTailwindcssClasses: {\n    type: \"boolean\",\n    category: \"Blade\",\n    default: false,\n    description: \"Sort Tailwindcss classes automatically. This option respects `tailwind.config.js`.\",\n    since: \"1.0.0\",\n  },\n  tailwindcssConfigPath: {\n    type: \"string\",\n    category: \"Blade\",\n    default: '',\n    description: \"Path to custom Tailwindcss config. This option is available only when `sortTailwindcssClasses` is present.\",\n    since: \"1.5.7\",\n  },\n  sortHtmlAttributes: {\n    type: \"string\",\n    category: \"Blade\",\n    default: \"none\",\n    description: \"Sort HTML Attributes. [none|alphabetical|code-guide|idiomatic|vuejs|custom]\",\n    since: \"1.5.0\",\n  },\n  customHtmlAttributesOrder: {\n    type: \"string\",\n    category: \"Blade\",\n    default: \"\",\n    description: \"Comma separated custom HTML attributes order. e.g. \\\"id, aria-.+, class, src\\\". To enable this you must specify sort html attributes option as `custom`. You can use regex for attribute names.\",\n    since: \"1.8.0\",\n  },\n  noPhpSyntaxCheck: {\n    type: \"boolean\",\n    category: \"Blade\",\n    default: false,\n    description: \"Disable PHP syntax checking\",\n    since: \"1.7.0\",\n  },\n};\n\n"],
  "mappings": "0jBAAA,IAAAA,EAAA,GAAAC,EAAAD,EAAA,oBAAAE,EAAA,cAAAC,EAAA,YAAAC,EAAA,YAAAC,EAAA,aAAAC,IAAA,eAAAC,EAAAP,GCAA,IAAAQ,EAAyD,oBAEzDC,EAA6B,mBAC7BC,EAAiB,mBAEJC,EAAQ,CACnBC,EACAC,EACAC,IACG,CACH,IAAMC,EAAoC,CACxC,WAAYD,EAAK,SACjB,eAAgBA,EAAK,WACrB,eAAgBA,EAAK,uBAAyB,yBAA2BA,EAAK,gBAAkB,gBAAkBA,EAAK,eACvH,eAAgBA,EAAK,eACrB,QAASA,EAAK,QACd,uBAAwBA,EAAK,uBAC7B,sBAAuBE,EAA0BF,EAAK,SAAUA,EAAK,qBAAqB,EAC1F,mBAAoBA,EAAK,mBACzB,qBAAsB,GACtB,iBAAkBA,EAAK,iBACvB,0BAA2BA,EAAK,yBAClC,EAKA,MAAO,CACL,KAAM,kBACN,QALa,gBAAa,gBAAgB,eAAU,CAAC,EACjCF,EAAMG,CAAgB,EAK1C,IAAKH,EAAK,OACV,OAAQA,EACR,MAAO,CACT,CACF,EAEA,SAASI,EAA0BC,EAA8BC,EAAoD,CACnH,GAAI,CAACA,EACH,OAGF,GAAI,EAAAC,QAAK,WAAWD,GAAc,EAAE,EAClC,OAAOA,EAGT,IAAME,EAAiB,oBAAkB,KAAKH,CAAQ,EAEtD,OAAO,EAAAE,QAAK,QAAQ,EAAAA,QAAK,QAAQC,GAAkB,EAAE,EAAGF,GAAc,EAAE,CAC1E,CC9CO,IAAMG,EAASC,GAAuB,CAC3C,IAAMC,EAAOD,EAAK,SAAS,EAE3B,OAAQC,EAAK,KAAM,CACjB,IAAK,kBACH,OAAOA,EAAK,IAEhB,CAEA,MAAM,IAAI,MAAM,sBAAsBA,EAAK,MAAM,CACnD,ECZO,IAAMC,EAAiB,CAC5B,SAAU,EACV,WAAY,GACd,EAEaC,EAAU,CACrB,eAAgB,CACd,KAAM,SACN,SAAU,QACV,QAAS,OACT,YACE,2HACF,MAAO,OACT,EACA,eAAgB,CACd,KAAM,UACN,SAAU,QACV,QAAS,GACT,YAAa,2BACb,MAAO,OACT,EACA,uBAAwB,CACtB,KAAM,UACN,SAAU,QACV,QAAS,GACT,YAAa,qFACb,MAAO,OACT,EACA,sBAAuB,CACrB,KAAM,SACN,SAAU,QACV,QAAS,GACT,YAAa,6GACb,MAAO,OACT,EACA,mBAAoB,CAClB,KAAM,SACN,SAAU,QACV,QAAS,OACT,YAAa,8EACb,MAAO,OACT,EACA,0BAA2B,CACzB,KAAM,SACN,SAAU,QACV,QAAS,GACT,YAAa,gMACb,MAAO,OACT,EACA,iBAAkB,CAChB,KAAM,UACN,SAAU,QACV,QAAS,GACT,YAAa,8BACb,MAAO,OACT,CACF,EHnDO,IAAMC,EAA+B,CAC1C,CACE,KAAM,QACN,QAAS,CAAC,OAAO,EACjB,MAAO,QACP,WAAY,CAAC,YAAY,EACzB,QAAS,mBACT,QAAS,OACT,mBAAoB,GACpB,kBAAmB,CAAC,OAAO,CAC7B,CACF,EAEaC,EAAmC,CAC9C,MAAO,CACL,MAAAC,EACA,UAAW,eACX,SAASC,EAAW,CAClB,OAAOA,EAAK,KACd,EACA,OAAOA,EAAW,CAChB,OAAOA,EAAK,GACd,CACF,CACF,EAEaC,EAAqC,CAChD,eAAgB,CACd,MAAAC,CACF,CACF",
  "names": ["src_exports", "__export", "defaultOptions", "languages", "options", "parsers", "printers", "__toCommonJS", "import_prettier", "import_synckit", "import_path", "parse", "text", "parsers", "opts", "formatterOptions", "resolveTailwindConfigPath", "filepath", "optionPath", "path", "prettierRcPath", "print", "path", "node", "defaultOptions", "options", "languages", "parsers", "parse", "node", "printers", "print"]
}
