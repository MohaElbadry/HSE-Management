{
  "version": 3,
  "sources": ["../src/main.ts"],
  "sourcesContent": ["import { createContext } from \"tailwindcss/lib/lib/setupContextUtils\";\r\nimport { generateRules } from \"tailwindcss/lib/lib/generateRules\";\r\nimport resolveConfig from \"tailwindcss/resolveConfig\";\r\nimport type { Config } from \"tailwindcss/types/config\";\r\nimport escalade from \"escalade/sync\";\r\nimport { IOption } from \"./options\";\r\nimport objectHash from \"object-hash\";\r\nimport path from \"path\";\r\n\r\nlet tailwindConfig: Config = {\r\n    content: [],\r\n    theme: {},\r\n};\r\n\r\nconst contextMap = new Map();\r\n\r\nconst __defaultConfig__ = \"tailwind.config.js\";\r\n\r\nfunction bigSign(bigIntValue: number) {\r\n    const left: any = bigIntValue > 0n;\r\n    const right: any = bigIntValue < 0n;\r\n    return left - right;\r\n}\r\n\r\nfunction prefixCandidate(context, selector) {\r\n    const prefix = context.tailwindConfig.prefix;\r\n    return typeof prefix === \"function\" ? prefix(selector) : prefix + selector;\r\n}\r\n\r\nfunction getClassOrderPolyfill(classes, context) {\r\n    const parasiteUtilities = new Set([\r\n        prefixCandidate(context, \"group\"),\r\n        prefixCandidate(context, \"peer\"),\r\n    ]);\r\n\r\n    const classNamesWithOrder: Array<Array<string>> = [];\r\n\r\n    for (const className of classes) {\r\n        let order =\r\n            generateRules(new Set([className]), context).sort(([a], [z]) =>\r\n                bigSign(z - a)\r\n            )[0]?.[0] ?? null;\r\n\r\n        if (order === null && parasiteUtilities.has(className)) {\r\n            order = context.layerOrder.components;\r\n        }\r\n\r\n        classNamesWithOrder.push([className, order]);\r\n    }\r\n\r\n    return classNamesWithOrder;\r\n}\r\n\r\nexport function sortClasses(classStr: string, options: IOption = {}): string {\r\n    const tailwindConfigPath = escalade(__dirname, (dir, names) => {\r\n        if (names.includes(__defaultConfig__)) {\r\n            return __defaultConfig__;\r\n        }\r\n    });\r\n\r\n    tailwindConfig.content = [\"no-op\"];\r\n    if (tailwindConfigPath) {\r\n        tailwindConfig = require(tailwindConfigPath);\r\n    }\r\n\r\n    if (options.tailwindConfig && options.tailwindConfigPath) {\r\n        throw new Error(\r\n            \"You can not specify tailwinfConfig or tailwinfConfigPath. Please specify either one.\"\r\n        );\r\n    }\r\n\r\n    if (options.tailwindConfigPath) {\r\n        tailwindConfig = requireConfig(options.tailwindConfigPath);\r\n    }\r\n\r\n    if (options.tailwindConfig) {\r\n        tailwindConfig = options.tailwindConfig;\r\n    }\r\n\r\n    const hash = objectHash(tailwindConfig, { ignoreUnknown: true });\r\n\r\n    let context;\r\n\r\n    const existing = contextMap.get(hash);\r\n\r\n    if (existing && existing.hash === hash) {\r\n        context = existing.context;\r\n    } else {\r\n        context = createContext(resolveConfig(tailwindConfig));\r\n        // console.log(context.getClassOrder);\r\n        contextMap.set(hash, { context, hash });\r\n    }\r\n\r\n    const parts: string[] = classStr\r\n        .split(/\\s+/)\r\n        .filter((x) => x !== \"\" && x !== \"|\");\r\n\r\n    const unknownClassNames: string[] = [];\r\n    const knownClassNamesWithOrder = context.getClassOrder\r\n        ? context.getClassOrder(parts)\r\n        : getClassOrderPolyfill(parts, context);\r\n\r\n    const knownClassNames = knownClassNamesWithOrder\r\n        .sort(([, a]: any, [, z]: any) => {\r\n            if (a === z) return 0;\r\n            if (a === null) return -1;\r\n            if (z === null) return 1;\r\n            return bigSign(a - z);\r\n        })\r\n        .map(([className]) => className);\r\n\r\n    return [...unknownClassNames, ...knownClassNames].join(\" \");\r\n}\r\n\r\nfunction requireConfig(configPath: string) {\r\n    try {\r\n        return require(configPath);\r\n    } catch (err: any) {\r\n        if (\r\n            err.code === \"MODULE_NOT_FOUND\" &&\r\n            err.moduleName === path.resolve(configPath)\r\n        ) {\r\n            throw new Error(\"tailwind config could not be found at: \" + path);\r\n        }\r\n\r\n        throw err;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["main_exports", "__export", "sortClasses", "__toCommonJS", "import_setupContextUtils", "import_generateRules", "import_resolveConfig", "import_sync", "import_object_hash", "import_path", "tailwindConfig", "contextMap", "__defaultConfig__", "bigSign", "bigIntValue", "left", "right", "prefixCandidate", "context", "selector", "prefix", "getClassOrderPolyfill", "classes", "_a", "parasiteUtilities", "classNamesWithOrder", "className", "order", "a", "z", "classStr", "options", "tailwindConfigPath", "escalade", "dir", "names", "requireConfig", "hash", "objectHash", "existing", "resolveConfig", "parts", "x", "unknownClassNames", "knownClassNames", "configPath", "err", "path"]
}
