import { EndOfLine } from './runtimeConfig';
export declare const optional: (obj: any) => any;
export declare function readFile(path: any): Promise<unknown>;
export declare function splitByLines(content: any): any;
export type FormatPhpOption = {
    noPhpSyntaxCheck?: boolean;
    printWidth?: number;
    trailingCommaPHP?: boolean;
    phpVersion?: string;
    singleQuote?: boolean;
};
export declare const printWidthForInline = 1000;
export declare function formatStringAsPhp(content: any, params?: FormatPhpOption): any;
export declare function formatRawStringAsPhp(content: string, params?: FormatPhpOption): any;
export declare function getArgumentsCount(expression: any): any;
export declare function normalizeIndentLevel(length: any): any;
export declare function printDiffs(diffs: any): Promise<any>;
export declare function generateDiff(path: any, originalLines: any, formattedLines: any): any;
export declare function prettifyPhpContentWithUnescapedTags(content: any): Promise<any>;
export declare function prettifyPhpContentWithEscapedTags(content: any): Promise<any>;
export declare function removeSemicolon(content: any): Promise<any>;
export declare function formatAsPhp(content: any): Promise<any>;
export declare function preserveOriginalPhpTagInHtml(content: any): Promise<any>;
export declare function revertOriginalPhpTagInHtml(content: any): Promise<any>;
export declare function indent(content: any, level: any, options: any): any;
export declare function unindent(directive: any, content: any, level: any, options: any): any;
export declare function preserveDirectives(content: any): Promise<any>;
export declare function preserveDirectivesInTag(content: any): Promise<unknown>;
export declare function revertDirectives(content: any): Promise<any>;
export declare function revertDirectivesInTag(content: any): Promise<any>;
export declare function printDescription(): void;
export declare function checkResult(formatted: any): any;
export declare function escapeReplacementString(string: string): string;
export declare function debugLog(...content: any): any;
export declare function getEndOfLine(endOfLine?: EndOfLine): string;
